from turtle import *
color('red', 'blue')
#begin_fill()
rule=['r','f','l','l','f','r']
prev=['r','f','l','l','f','r']
ans=[]
for iter in range(6):
    ans = []
    for i in prev:
        if(i=='f'):
            ans+=rule
        else:
            ans.append(i)
    prev = ans

print(ans)

for i in range(0,len(ans)):
    if(ans[i] == 'r'):
        right(45)
    elif(ans[i] == 'f'):
        forward(20)
    elif(ans[i] == 'l'):
        left(45)


#end_fill()
done()

"""or this works well also

import turtle

def c_curve(depth: int):
    
    start = "+f--f+"
    for i in range(depth):
        string = ""
        for j in range(len(start)):
            
            if start[j] == 'f':
                string += "+f--f+"
            else:
                string += start[j]
        start = string
        
    return start

def main():
    
    string = c_curve(depth=4)
    rules = {
            'f': [t.forward, 10],
            '+': [t.right, 45],
            '-': [t.left, 45],
        }
    
    for i in range(len(string)):
        rules.get(string[i])[0](rules.get(string[i])[1])        


t = turtle.Turtle()
main()
turtle.mainloop()
turtle.done()"""

# import turtle

# # C Curve function
# def c_curve(n):
#     if n == 0:
#         return ['F']
#     else:
#         prev = c_curve(n - 1)
#         return prev + ['L'] + [x if x == 'F' else 'R' for x in reversed(prev)]

# # Configure turtle
# screen = turtle.Screen()
# screen.title("C Curve")
# screen.bgcolor("white")

# t = turtle.Turtle()
# t.speed(0)
# t.penup()
# t.goto(-200, 0)
# t.pendown()

# # Parameters
# order = 4 # Adjust the order as needed
# size = 6

# # Generate C Curve
# curve = c_curve(order)
# for move in curve:
#     if move == 'F':
#         t.forward(size)
#     elif move == 'L':
#         t.left(90)
#     elif move == 'R':
#         t.right(90)

# # Hide turtle
# t.hideturtle()

# # Keep window open until it's closed by the user
# turtle.done()

#Dragon curve

import turtle

def dragon_curve(turtle, order, length, direction):
    if order == 0:
        turtle.forward(length)
    else:
        dragon_curve(turtle, order - 1, length, 1)
        turtle.right(90 * direction)
        dragon_curve(turtle, order - 1, length, -1)

turtle.speed(0)
dragon_curve(turtle, 12, 5, 1)
turtle.done()

"""or this works well also

import turtle

def dragon_curve(depth: int):

    start = "f-h"
    for i in range(depth):
        string = ""
        for j in range(len(start)):
            
            if start[j] == 'f':
                string += "f-h"
            elif start[j] == 'h':
                string += "f+h"
            else:
                string += start[j]
            
        start = string
        
    return start


def main():

    t.left(90)
    string = dragon_curve(depth=10)

    rules = {
            'f': [t.forward, 10],
            'h': [t.forward, 10],
            '+': [t.right, 90],
            '-': [t.left, 90],
        }
    
    for i in range(len(string)):
        rules.get(string[i])[0](rules.get(string[i])[1])        


t = turtle.Turtle()
main()
turtle.mainloop()
turtle.done()"""

# import turtle

# def dragon_curve(order, length, angle, turn):
#     if order == 0:
#         turtle.forward(length)
#         return
#     else:
#         dragon_curve(order - 1, length, angle, "right")
#         turtle.left(angle if turn == "right" else -angle)
#         dragon_curve(order - 1, length, angle, "left")

# # Configure turtle
# screen = turtle.Screen()
# screen.title("Dragon Curve")
# screen.bgcolor("white")

# t = turtle.Turtle()
# t.speed(0)
# t.penup()
# t.goto(-200, 0)
# t.pendown()

# # Parameters
# order = 4  # Adjust the order as needed
# length = 5
# angle = 90

# # Generate Dragon Curve
# dragon_curve(order, length, angle, "right")

# # Hide turtle
# t.hideturtle()

# # Keep window open until it's closed by the user
# turtle.done()


#julia

import turtle
import math

def julia(z, c, n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return julia(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# Screen size (in pixels)
screenx, screeny = 800, 600

# Complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-2.0, 2.0)

# Discretization step
step = 2

# Turtle configuration
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("black")
screen.title("Julia Fractal (discretization step = %d)" % (int(step)))
jTurtle = turtle.Turtle()
jTurtle.penup()
jTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0]) / screenx, (complexPlaneY[1] - complexPlaneY[0]) / screeny

# Julia set constant (change as needed)
c = complex(-0.7, 0.27015)

# Plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m = julia(0, x + 1j * y + c)
        if not math.isnan(m.real):
            color = [abs(math.sin(m.imag)) for i in range(3)]
            jTurtle.color(color)
            jTurtle.dot(2.4, color)
            jTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()


#terrain

import turtle
import random

# Set up the screen
screen = turtle.Screen()
screen.setup(width=800, height=600)
screen.bgcolor("skyblue")

# Set up the turtle
terrain_turtle = turtle.Turtle()
terrain_turtle.speed(0)  # Set the fastest drawing speed
terrain_turtle.penup()

# Function to draw terrain
def draw_terrain():
    terrain_turtle.goto(-400, -20)  # Starting point
    terrain_turtle.pendown()

    # Draw the terrain
    for _ in range(160):
        terrain_turtle.color("green")
        terrain_turtle.forward(5)  # Move forward
        terrain_turtle.setheading(random.choice([0, 45, -45]))  # Turn randomly
        terrain_turtle.forward(random.randint(1, 10))  # Move up or down randomly

# Call the function to draw terrain
draw_terrain()

# Hide the turtle
terrain_turtle.hideturtle()

# Keep the window open
screen.mainloop()

#mandelbrot

import turtle
import math

def mandelbrot(z , c , n=20):
    if abs(z) > 10 ** 12:
        return float("nan")
    elif n > 0:
        return mandelbrot(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c

# screen size (in pixels)
screenx, screeny = 800, 600

# complex plane limits
complexPlaneX, complexPlaneY = (-2.0, 2.0), (-1.0, 2.0)

# discretization step
step = 2

# turtle config
turtle.tracer(0, 0)
turtle.setup(screenx, screeny)

screen = turtle.Screen()
screen.bgcolor("red")
screen.title("Mandelbrot Fractal (discretization step = %d)" % (int(step)))
mTurtle = turtle.Turtle()
mTurtle.penup()
mTurtle.shape("square")

# px * pixelToX = x in complex plane coordinates
pixelToX, pixelToY = (complexPlaneX[1] - complexPlaneX[0])/screenx, (complexPlaneY[1] - complexPlaneY[0])/screeny

# plot
for px in range(-int(screenx/2), int(screenx/2), int(step)):
    for py in range(-int(screeny/2), int(screeny/2), int(step)):
        x, y = px * pixelToX, py * pixelToY
        m =  mandelbrot(0, x + 1j * y)
        if not math.isnan(m.real):
            color = [abs(math.sin(m.imag)) for i in range(3)]
            mTurtle.color(color)
            mTurtle.dot(2.4, color)
            mTurtle.goto(px, py)
    turtle.update()

turtle.mainloop()
